#!/usr/bin/env python3
# Copyright (c) 2021 Alexander Kernozhitsky
#
# SoFCheck is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# SoFCheck is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with SoFCheck.  If not, see <https://www.gnu.org/licenses/>.

from chess import Board, Move
import sys
import argparse


class CommandFilter:
    def __init__(self, in_stream):
        self.__lines = iter(in_stream)

    def __iter__(self):
        return self

    def __next__(self):
        while True:
            line = next(self.__lines)
            normalized = line.strip()
            if not normalized or normalized[0] == '#':
                continue
            return normalized


class GameReader:
    def __init__(self, in_stream):
        self.__lines = CommandFilter(in_stream)
        try:
            self.__last_game = next(self.__lines)
            if not self.__last_game.startswith('game '):
                raise RuntimeError('File must start with "game" command')
        except StopIteration:
            self.__last_game = None

    def __iter__(self):
        return self

    def __next__(self):
        if self.__last_game is None:
            raise StopIteration()
        lines = [self.__last_game]
        while True:
            try:
                line = next(self.__lines)
                if line.startswith('game '):
                    self.__last_game = line
                    break
                lines.append(line)
            except StopIteration:
                self.__last_game = None
                break
        return lines


def norm_fen(fen):
    return Board(fen).fen(en_passant='fen')


DESCRIPTION = '''\
Upgrades dataset format generated by BattleField v0.9.11 (and earlier) to
canonical SoFGameSet, which can be used to generate datasets for SoFCheck.
Note that starting from BattleField v0.9.12, this script is not needed to
perform conversion, as BattleField is able to generate canonical SoFGameSet
itself.
'''

parser = argparse.ArgumentParser(description=DESCRIPTION)
args = parser.parse_args(sys.argv)

for game in GameReader(sys.stdin):
    sys.stdout.write(game[0] + '\n')
    # Filter unused commands
    game = [line
            for line in game
            if line.split()[0] in ('start', 'board', 'moves')]
    if len(game) < 2:
        raise RuntimeError('Game is too small')
    if game[1] == 'start':
        fen = Board.starting_fen
    elif game[1].startswith('board '):
        fen = norm_fen(game[1][6:].strip())
    else:
        raise RuntimeError('Second line in the game must be a board')
    if fen == Board.starting_fen:
        sys.stdout.write('start\n')
    else:
        sys.stdout.write(f'board {fen}\n')
    board = Board(fen)
    moves = []
    for line in game[2:]:
        assert not line.startswith('game ')
        if line.startswith('board ') or line == 'start':
            if line == 'start':
                new_fen = Board.starting_fen
            else:
                new_fen = norm_fen(line[6:].strip())
            new_board = Board(new_fen)
            legal_moves = list(board.legal_moves)
            chosen_move = None
            for move in legal_moves:
                board.push(move)
                cur_fen = board.fen(en_passant='fen')
                board.pop()
                if new_fen == cur_fen:
                    chosen_move = move
                    break
            if chosen_move is None:
                fen = board.fen(en_passant='fen')
                msg = f'No suitable move found to go from {fen} to {new_fen}'
                raise RuntimeError(msg)
            moves.append(chosen_move.uci())
            board.push(chosen_move)
        elif line.startswith('moves '):
            move_strs = list(line[6:].split())
            for move in move_strs:
                board.push(board.parse_uci(move))
                moves.append(move)
        else:
            # Unknown command, ignore it
            pass
    sys.stdout.write('moves ' + ' '.join(moves) + '\n\n')
